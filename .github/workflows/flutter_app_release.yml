# This is a basic workflow to help you get started with Actions

name: Flutter - Test, Build and Release apk

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    tags:
      - 'v**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # This job will run on ubuntu virtual machine
    runs-on: ubuntu-latest
    steps:

      # Setup Java environment in order to build the Android app.
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - run: echo $SIGNING_KEY | base64 -d > android/app/key.jks
        env:
          SIGNING_KEY: ${{ secrets.UPLOAD_KEYSTORE_BASE64 }}

      # Setup the flutter environment.
      - uses: subosito/flutter-action@v1
        with:
          channel: 'beta' # 'dev', 'alpha', default to: 'stable'
          flutter-version: '2.2.x' # you can also specify exact version of flutter

      # Get flutter dependencies.
      - run: flutter pub get

      # Check for any formatting issues in the code.
      - run: flutter format --set-exit-if-changed .

      # Statically analyze the Dart code for any errors.
      - run: flutter analyze .


      # Run widget tests for our flutter project.
      - run: flutter test

      # Build apk.
      - run: flutter build apk --split-per-abi
        env:
          KEY_STORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PATH: key.jks

      # Upload generated apk to the artifacts.
      - uses: actions/upload-artifact@v1
        with:
          name: release-apk
          path: build/app/outputs/flutter-apk/
